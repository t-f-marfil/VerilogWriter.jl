var documenterSearchIndex = {"docs":
[{"location":"index.html#VerilogWriter-Document","page":"Introduction","title":"VerilogWriter Document","text":"","category":"section"},{"location":"index.html#Brief-Introduction","page":"Introduction","title":"Brief Introduction","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"DocTestSetup = quote\r\n    using VerilogWriter\r\nend","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"If you have IJulia locally, execute","category":"page"},{"location":"index.html#In[1]","page":"Introduction","title":"In[1]","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using VerilogWriter","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"and then","category":"page"},{"location":"index.html#In[2]","page":"Introduction","title":"In[2]","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"x = @always (\r\n    dout = d1 + d2;\r\n    if b1\r\n        dout = ~d1\r\n    elseif b2 \r\n        dout = ~d2\r\n    end\r\n)\r\nvshow(x)","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"and now you get the following:","category":"page"},{"location":"index.html#Out[2]","page":"Introduction","title":"Out[2]","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"always_comb begin\r\n    dout = (d1 + d2);\r\n    if (b1) begin\r\n        dout = ~d1;\r\n    end else if (b2) begin\r\n        dout = ~d2;\r\n    end\r\nend\r\ntype: VerilogWriter.Alwayscontent","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Another example is ","category":"page"},{"location":"index.html#In[3]","page":"Introduction","title":"In[3]","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"x = @always (\r\n    @posedge clk;\r\n    \r\n    dlog <= dout;\r\n    if b1 \r\n        dout <= ~dout \r\n    end\r\n) \r\nvshow(x)\r\n[ralways](@ref)","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"and now you get ","category":"page"},{"location":"index.html#Out[3]","page":"Introduction","title":"Out[3]","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"always_ff @( posedge clk ) begin\r\n    dlog <= dout;\r\n    if (b1) begin\r\n        dout <= ~dout;\r\n    end\r\nend\r\ntype: VerilogWriter.Alwayscontent","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = VerilogWriter","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ralways","category":"page"},{"location":"index.html#VerilogWriter.ralways","page":"Introduction","title":"VerilogWriter.ralways","text":"ralways(expr::Expr)\n\nConvert Julia AST to Verilog always-block. Dispatch methods here according to expr.head.\n\n\n\n\n\nralways(expr, ::T) where {T <: Val}\n\nThe case where expr.head is not block, which means expr is one assign (inside always-block) or if-else block.\n\n\n\n\n\nralways(expr, ::Val{:block})\n\nConvert multiple ifelse-blocks and assigns to one always-block.\n\n\n\n\n\n","category":"function"}]
}
